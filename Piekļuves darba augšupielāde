import tkinter as tk
from tkinter import messagebox, simpledialog
import sqlite3

def setup_database():
    # Datu bazes
    conn = sqlite3.connect('shopping_list.db')
    c = conn.cursor()
    c.execute('''create table if not exists users (user_id integer primary key, username text unique, password_hash text)''')
    c.execute('''create table if not exists items (item_id integer primary key, item_name text, user_id integer, foreign key(user_id) references users(user_id))''')
    conn.commit()
    return conn

def login_or_signup(conn, window):
    frame = tk.Frame(window)
    frame.pack()

    username_label = tk.Label(frame, text="Username:")
    username_label.grid(row=0, column=0, padx=5, pady=5)
    username_entry = tk.Entry(frame)
    username_entry.grid(row=0, column=1, padx=5, pady=5)

    password_label = tk.Label(frame, text="Password:")
    password_label.grid(row=1, column=0, padx=5, pady=5)
    password_entry = tk.Entry(frame, show="*")
    password_entry.grid(row=1, column=1, padx=5, pady=5)

    submit_button = tk.Button(frame, text="Submit", command=lambda: validate_login(conn, username_entry.get(), password_entry.get(), window))
    submit_button.grid(row=2, columnspan=2, padx=5, pady=5)

def validate_login(conn, username, password, window):
    c = conn.cursor()
    c.execute('select password_hash from users where username = ?', (username,))
    user = c.fetchone()
    if user:
        if password == user[0]:
            window.destroy()
            open_shopping_list(conn, username)
        else:
            messagebox.showerror("Error", "Incorrect password. Please try again.")
    else:
        if messagebox.askyesno("Sign up", "Username not found. Would you like to sign up?"):
            c.execute('insert into users (username, password_hash) values (?, ?)', (username, password))
            conn.commit()
            window.destroy()
            open_shopping_list(conn, username)
        else:
            messagebox.showinfo("Info", "Please try again with correct username.")

def open_shopping_list(conn, username):
    window = tk.Tk()
    window.title("Shopping List")

    item_entry = tk.Entry(window, width=50)
    item_entry.grid(row=0, column=0, padx=5, pady=5)

    add_item_button = tk.Button(window, text="Add Item", width=10, command=lambda: add_item(conn, username, item_entry, items_listbox))
    add_item_button.grid(row=0, column=1, padx=5, pady=5)

    edit_item_button = tk.Button(window, text="Edit Item", width=10, command=lambda: edit_item(conn, username, item_entry, items_listbox))
    edit_item_button.grid(row=0, column=2, padx=5, pady=5)

    delete_item_button = tk.Button(window, text="Delete Item", width=10, command=lambda: delete_item(conn, username, items_listbox))
    delete_item_button.grid(row=0, column=3, padx=5, pady=5)

    copy_item_button = tk.Button(window, text="Copy Item", width=10, command=lambda: copy_item(conn, username, items_listbox))
    copy_item_button.grid(row=0, column=4, padx=5, pady=5)

    items_listbox = tk.Listbox(window, width=50, height=15)
    items_listbox.grid(row=1, columnspan=5, padx=5, pady=5)

    # Populate listbox with existing items
    update_items_listbox(conn, username, items_listbox)

    window.mainloop()

def add_item(conn, username, item_entry, items_listbox):
    item = item_entry.get()
    if item:
        c = conn.cursor()
        c.execute('insert into items (item_name, user_id) values (?, (select user_id from users where username = ?))', (item, username))
        conn.commit()
        item_entry.delete(0, tk.END)
        update_items_listbox(conn, username, items_listbox)
    else:
        messagebox.showwarning("Warning", "You must enter an item.")

def edit_item(conn, username, item_entry, items_listbox):
    try:
        selected_item = items_listbox.get(items_listbox.curselection())
        new_item = simpledialog.askstring("Edit Item", "Enter new item name:", initialvalue=selected_item)
        if new_item:
            c = conn.cursor()
            c.execute('update items set item_name = ? where item_name = ? and user_id = (select user_id from users where username = ?)', (new_item, selected_item, username))
            conn.commit()
            update_items_listbox(conn, username, items_listbox)
    except:
        messagebox.showwarning("Warning", "Please select an item to edit.")

def delete_item(conn, username, items_listbox):
    try:
        selected_item = items_listbox.get(items_listbox.curselection())
        c = conn.cursor()
        c.execute('delete from items where item_name = ? and user_id = (select user_id from users where username = ?)', (selected_item, username))
        conn.commit()
        update_items_listbox(conn, username, items_listbox)
    except:
        messagebox.showwarning("Warning", "Please select an item to delete.")

def copy_item(conn, username, items_listbox):
    try:
        selected_item = items_listbox.get(items_listbox.curselection())
        c = conn.cursor()
        c.execute('insert into items (item_name, user_id) values (?, (select user_id from users where username = ?))', (selected_item, username))
        conn.commit()
        update_items_listbox(conn, username, items_listbox)
    except:
        messagebox.showwarning("Warning", "Please select an item to copy.")

def update_items_listbox(conn, username, items_listbox):
    items_listbox.delete(0, tk.END)
    c = conn.cursor()
    c.execute('select item_name from items where user_id = (select user_id from users where username = ?)', (username,))
    for row in c.fetchall():
        items_listbox.insert(tk.END, row[0])

conn = setup_database()
window = tk.Tk()
window.title("Login")
login_or_signup(conn, window)
window.mainloop()
